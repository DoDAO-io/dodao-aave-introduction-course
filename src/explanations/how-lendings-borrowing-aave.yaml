- title: How to connect wallet to Aave
  shortTitle: How to connect
  key: connect-aave
  details: |
    Aave is a decentralized finance platform that allows users to lend and borrow assets. In order to do so, users need to have a cryptocurrency wallet set up. 
    Once the wallet is set up, they can then commence lending and borrowing on the Aave platform. Follow this link for Aave's Dapp: [Aave app](https://app.aave.com/).
    
    We need to connect the wallet for lending and borrowing. So we need to click the "connect wallet" button and select your preferred wallet for lending and borrowing.

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/connectwallet.jpg?raw=true)

    After connecting the wallet, the dashboard will look like this. We can select our preferred network for lending and borrowing assets; however, in order to do so, 
    we need to pay gas fees similar to transactions. Consequently, we need to have some native token of the network to lend and borrow assets. For example, 
    if we want to lend in Ethereum market, we need to own some ether for paying gas fees.

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/aavedashboard.jpg?raw=true)

- title: How to lend in Aave
  shortTitle: "Lending in Aave"
  key: lending-Aave
  details: |
    In this tutorial, we will be demonstrating how to lend assets using the Test Network. For this guide, we will be using the MetaMask Wallet. 
    If you have assets in your Wallet, you will have the option to supply those assets.
    
    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/supplyusdc.jpg?raw=true)
    
    We will lend some USDC token - just click on the "supply" button. A new window will pop up; fill in the details and click on "supply USDC".
    
    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/supplyingusdc.jpg?raw=true)

    Now the connected wallet will pop up and asks for confirmation for the transaction. We need to confirm the transaction. Wait until the transaction complete.

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/confirmingLending.jpg?raw=true)

    After completing the procedure outlined above, your dashboard should look something like this. The interest rate is accrued based on the APY (annual percentage yield).
    USDC can be used as collateral, as indicated by the tick mark in that column.

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/lentusdc.jpg?raw=true)

    We have successfully lent USDC in Aave. We can add aTokens to our wallet for tracking the balances. This procedure is the same for all networks like Ethereum mainnet, Polygon, etc.

- title: How to borrow in Aave
  shortTitle: "Borrowing in Aave"
  key: borrowing-Aave
  details: |
    In this guide, we'll show you how to borrow assets from Aave. We'll use USDC as collateral to borrow DAI tokens.
    To borrow DAI tokens, we need to connect our wallet to Aave, in the same way that we would if we were lending. The dashboard should look something like this:
    For borrowing DAI, click "Borrow." Before borrowing, I had 0 DAI tokens in my Metamask wallet.

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/borrowDAI.jpg?raw=true)

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/beforeborrowing.jpg?raw=true)
   
    Enter the amount of DAI you would like to borrow, up to the maximum limit. Keep an eye on the health factor to make sure it stays at a good level. 
    We're going to borrow at a stable rate, so click on the stable rate and hit “Borrow DAI.” The connected wallet will pop up for confirmation; hit confirm and wait 
    until the transaction completes. That maximum value is determined by our locked collateral. In our case it is USDC which is used as collateral.

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/borrowingDAI.jpg?raw=true)

    After completing the transaction, the dashboard will look something like this. We can add the tokens to our wallet after the transaction is completed.

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/BorrowedDAI.jpg?raw=true)

    We have successfully borrowed DAI at a stable rate. Similarly, we can borrow at a variable rate. We have used USDC as collateral to borrow DAI. 
    After borrowing the balance of DAI tokens is 1000 DAI in my wallet.

    ![AAVE](https://github.com/DoDAO-io/dodao-aave-introduction-course/blob/main/images/afterborrowing.jpg?raw=true)

- title: How ATokens works in Lending
  shortTitle: Working of ATokens
  key: working-ATokens
  details: |
    The ATokens are interest-bearing derivative tokens that are minted and burned upon Deposit and Redeem. ATokens are pegged to corresponding asset in the ratio 1:1. 
    ATokens can be stored and transferred. In order to store ATokens in a wallet, the user must first add the ATokens from Aave's app. For example, 
    if the user wants to add AEth to their account, they need to click on “Eth” in the Aave app and then click on the “wallet” icon located next to it. After doing so, they can add it to their account.

    ATokens are minted in a 1:1 ratio to the deposited amount using the `MintOnDeposit` function. This will create tokens that have accrued interest and have increased value. 
    If these minted tokens are added to the wallet, users will be able to track their balances from the wallet itself instead of having to open Aave's app. 
    The ATokens can be transferred or traded in a similar way to normal tokens, but with some additional benefits. For example, when ATokens are transferred from account A to account B, 
    the transferred ATokens will accrue interest for account B. Additionally, the ATokens can be used as collateral if it's indicated in the dashboard of Aave. 

    The interest rate is based on the earn rate of the Aave. The accrual of interest never stops until the lent assets are withdrawn. For example, interest will be accrued even when an asset is used as collateral.
    ATokens are destroyed or "burned" when they are redeemed, similar to how new coins are minted. The function redeem executes this operation whenever a user withdraws assets. 
    This function will burn the ATokens and supply the assets at a 1:1 ratio of burnt ATokens to the user whenever they withdraw. The ATokens include EIP-20/ERC20 token methods with a few modifications, as well as EIP-2612. 
    EIPs (Improvement Proposals) are suggestions for new features or functionality that could be introduced. Link of AToken contract: [Atoken contract](https://github.com/aave/aave-protocol/blob/master/contracts/tokenization/AToken.sol).
- title: How Borrowing works in Aave
  shortTitle: How borrowing works
  key: borrowing-technical
  details: |
    Borrowing in Aave implements tokenisation concept similar to lending. The loans borrowed are overcollaterlized in order to negotiate the effect of  volatility of the assets as well to maintain the security of the assets. 
    When a user borrows assets, the "borrow" function is called and debt tokens are minted in a 1:1 ratio to the corresponding borrowed asset. These debt tokens are similar to ATokens and work as an interest-bearing derivative token 
    that implements most of the functionalities in EIP-20/ERC-20, with the exception of transfer functions like "transfer" and "allowance". This means that debt tokens cannot be transferred like ATokens. When loans are repaid the 
    debt tokens are burnt and locked collateral is released.

    Users can borrow funds in both stable and variable rates. Debt tokens are accrued based on the interest rate in which it is borrowed. Users can change the interest rate from stable to variable or vice-versa at any time. 
    This system allows users to have more control over their finances and how they want to manage their money.

    ### Calculation of interest rates

    #### Important  Terms

    1. U = Utilization rate   = B<sub>t </sub>/ L<sub>t </sub>. Where B<sub>t </sub>is the total assets borrowed and L<sub>t</sub> is the total liquidity. Each reserve have its own  Utilization rate. For example Eth reserve has its own U(Utilization rate). U = 0 if  L<sub>t</sub> = 0;
    2. U<sub>optimal </sub>= expected Utilization rate or targeted Utilization rate.
    3. R<sub>o</sub> = Base Variable borrow rate. It is zero for B<sub>t</sub> =0.
    4. R<sub>slope1</sub> = It is a constant called as interest rate slope below optimal
    5. R<sub>slope2</sub> = It is a constant called as interest rate slope above optimal
    6. O<sub>ratio</sub> = Optimal stable to total debt ratio
    7. Base<sub>s</sub> = Base stable borrow rate

    
    #### Variable rate calculation

    The interest rate R<sub>t </sub> follows the model:

    If U≤U<sub>optimal</sub>   

    R<sub>t</sub> = R<sub>o </sub>+ U/U<sub>optimal </sub> * R<sub>slope1</sub>

    If U>U<sub>optimal</sub>

    R<sub>t</sub> = R<sub>o </sub>+ [(U-U<sub>optimal</sub>)/(1-U<sub>optimal</sub>)]*R<sub>slope2</sub>



    * When U≤U<sub>optimal</sub>   

        The interest rate increase slowly with Utilization

    * When U>U<sub>optimal</sub>   

        The interest rate increases rapidly with the Utilization 


    In the borrow rate technical implementation, the[ ](https://github.com/aave/aave-v3-core/blob/e46341caf815edc268893f4f9398035f242375d9/contracts/protocol/libraries/math/MathUtils.sol#L51)calculateCompoundedInterest method relies on an approximation that mostly affects high interest rates. The resulting actual borrow rate is as follows: 

    ActualAPY=(1+TheoreticalAPY/secsperyear)^secsperyear-1


    ### Stable Interest rate calculation

    Base<sub>s</sub> = R<sub>slope1</sub> + offset<sub>base   </sub>;   E<sub>util</sub> = 10^27 - U<sub>optimal</sub>

    Ratio<sub>st</sub> = debt<sub>stable</sub>/Total debt ;  where Total debt = debt<sub>stable</sub>+<sub> </sub>debt<sub>variable</sub>

    This ratio is called as stable to debt ratio.

    Interest rate R<sub>s</sub> is calculated as follows :

    If U > U<sub>optimal</sub>

    R<sub>s </sub>= Base<sub>s </sub> + R<sub>slope1 </sub>+ R<sub>slope2</sub>*[(U-U<sub>optimal</sub>)/E<sub>util</sub>]

    Otherwise

    R<sub>s </sub>= Base<sub>s </sub> + R<sub>slope1 * </sub>(U/U<sub>optimal</sub>)

    The interest rate rebalances when Ratio<sub>st</sub> > O<sub>ratio</sub>

    R<sub>s</sub>  =  R<sub>s</sub>  + offset<sub>excess</sub> * [(ratio-O<sub>ratio</sub> )/10^27-O<sub>ratio</sub>] 

